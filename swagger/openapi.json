{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "API reference for Devstream platform built with Spring Boot.",
    "license" : {
      "name" : "GPL-2.0-only",
      "url" : "https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html#SEC1"
    },
    "termsOfService" : "https://www.devstream.in/terms-and-conditions",
    "title" : "Devstream Aurelia OpenAPI Specification",
    "version" : "0.3.75"
  },
  "servers" : [ {
    "url" : "{protocol}://{environment}.devstream.in/v1",
    "variables" : {
      "protocol" : {
        "default" : "https",
        "enum" : [ "http", "https" ]
      },
      "environment" : {
        "default" : "api",
        "enum" : [ "api", "api.dev", "api.staging", "api.test" ]
      }
    }
  } ],
  "tags" : [ {
    "description" : "Endpoints related to user authentication (login, register, refresh token, forgot password, reset password).",
    "name" : "Auth"
  }, {
    "description" : "Endpoints for managing content (creating, retrieving, updating, deleting content, analytics).",
    "name" : "Content"
  }, {
    "description" : "Endpoint for checking the health of the API service.",
    "name" : "Health"
  }, {
    "description" : "Endpoints for interacting with external platforms (syncing data, retrieving platform information).",
    "name" : "Platforms"
  }, {
    "description" : "Endpoints for managing user information (profile, settings, analytics).",
    "name" : "User"
  }, {
    "description" : "Endpoints to deal with user content publishing pipeline.",
    "name" : "Pipeline"
  }, {
    "description" : "Endpoints related to user account recovery.",
    "name" : "Recovery"
  } ],
  "paths" : {
    "/health" : {
      "get" : {
        "description" : "Health check for the API.",
        "operationId" : "get-health",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetHealth"
                }
              }
            },
            "description" : "Success."
          },
          "400" : {
            "description" : "Bad request. Invalid input or parameters provided."
          },
          "503" : {
            "description" : "Service unavailable. The system is under maintenance or overloaded."
          }
        },
        "security" : [ ],
        "summary" : "Health check for the API.",
        "tags" : [ "Health" ]
      }
    },
    "/user/profile" : {
      "get" : {
        "operationId" : "get-user-profile-information",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetUserProfile"
                }
              }
            },
            "description" : "User profile retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or parameters."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to view the profile."
          },
          "404" : {
            "description" : "Not found. User profile does not exist."
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        }, {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Retrieve the current user's profile information.",
        "tags" : [ "User" ]
      },
      "patch" : {
        "operationId" : "update-user-profile-information",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdateUserProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User profile updated successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to update the profile."
          },
          "404" : {
            "description" : "Not found. User profile does not exist."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Update user profile details.",
        "tags" : [ "User" ]
      }
    },
    "/user/settings" : {
      "get" : {
        "operationId" : "get-user-settings",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetUserSettings"
                }
              }
            },
            "description" : "Settings retrieved successfully."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to view settings."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Retrieve user-specific settings.",
        "tags" : [ "User" ]
      },
      "patch" : {
        "operationId" : "update-user-settings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdateUserSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Settings updated successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to update settings."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Update user-specific settings.",
        "tags" : [ "User" ]
      }
    },
    "/user/analytics" : {
      "get" : {
        "operationId" : "get-user-analytics",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetUserAnalytics"
                }
              }
            },
            "description" : "User analytics retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or parameters."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to view analytics."
          },
          "404" : {
            "description" : "Not found. User analytics data does not exist."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "View overall analytics for the user.",
        "tags" : [ "User" ]
      }
    },
    "/user/deactivate" : {
      "delete" : {
        "operationId" : "deactivate-user-account",
        "responses" : {
          "200" : {
            "description" : "User deleted successfully."
          },
          "404" : {
            "description" : "User with given ID not found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Deactivates the current user account.",
        "tags" : [ "User" ]
      }
    },
    "/user/password" : {
      "patch" : {
        "operationId" : "update-user-password",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdateUserPassword"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdateUserPassword"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Password updated successfully."
          },
          "400" : {
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to reset the password."
          },
          "404" : {
            "description" : "Not found. The user does not exist in the system."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Let's the user change their password with the help of old password.",
        "tags" : [ "User" ]
      }
    },
    "/auth/login" : {
      "post" : {
        "operationId" : "auth-login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestLogin"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseLogin"
                }
              }
            },
            "description" : "Login successful."
          },
          "302" : {
            "description" : "Found. User is already authenticated and redirected.",
            "headers" : {
              "x-redirection-location" : {
                "description" : "URL where the user is redirected.",
                "explode" : false,
                "schema" : {
                  "format" : "uri",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Invalid credentials provided."
          },
          "403" : {
            "description" : "Forbidden. Access to the resource is denied."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ ],
        "summary" : "Let's the user login to the system with given credentials.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/two-factor-auth" : {
      "post" : {
        "description" : "This is to validate the OTP generated if two factor authentication is enabled. The login ID must be tagged along with the OTP to map which login attempt this OTP belongs to.",
        "operationId" : "two-factor-auth",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestTwoFactorAuth"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseLogin"
                }
              }
            },
            "description" : "OTP is valid for the given login ID. Hence user is authenticated and both access and refresh tokens are granted."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "Bad request. Either OTP or login ID or both are missing."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "Unauthorized. The OTP does not match with the one generated for this login ID or invalid OTP is provided."
          }
        },
        "security" : [ ],
        "summary" : "Endpoint to validate OTP for two factor authentication.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/register" : {
      "post" : {
        "operationId" : "auth-register",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestRegister"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Registration successful."
          },
          "302" : {
            "description" : "Found. User is already authenticated and redirected.",
            "headers" : {
              "x-redirection-location" : {
                "description" : "URL where the user is redirected.",
                "explode" : false,
                "schema" : {
                  "format" : "uri",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "Conflict. A user with the provided details already exists."
          }
        },
        "security" : [ ],
        "summary" : "Registers a new user into the system.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/revalidate" : {
      "post" : {
        "description" : "This endpoint is used to revalidate the authentication token given the refresh token of the user. This endpoint returns a new valid authentication token. Without refresh token, this endpoint will not create a new authentication token. For getting an authentication token without refresh token, try logging in instead.",
        "operationId" : "auth-revalidate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestAuthRevalidate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseAuthRevalidate"
                }
              }
            },
            "description" : "Token refreshed successfully."
          },
          "400" : {
            "description" : "The refresh token is missing or invalid."
          },
          "401" : {
            "description" : "The provided refresh token is expired or revoked."
          },
          "403" : {
            "description" : "The request is not authorized (e.g., due to account restrictions)."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Revalidates an authentication token.",
        "tags" : [ "Auth" ]
      }
    },
    "/recovery/initiate" : {
      "post" : {
        "description" : "This route generates a password reset OTP and sends it via either email,  mobile number, or a seperate medium. A signed token is also generated and  sent in the response of this request. The user must submit both the OTP (sent via a seperate medium) and the signed token (sent as a response to this) to  verify the request and proceed with account recovery.\n",
        "operationId" : "recovery-initiate",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestRecoveryInitiate"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestRecoveryInitiate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseRecoveryInitiate"
                }
              }
            },
            "description" : "Recovery OTP generated and queued to be sent via a seperate medium. A signed token is sent as a response which is required to be sent while resetting the password."
          },
          "400" : {
            "description" : "The input provided is invalid or missing required fields."
          },
          "401" : {
            "description" : "Authentication is invalid or missing."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "The user does not exist in the system."
          }
        },
        "security" : [ ],
        "summary" : "Generates a password reset OTP and sends it via email or other channels.",
        "tags" : [ "Recovery" ]
      }
    },
    "/recovery/challenge" : {
      "post" : {
        "description" : "When a user initiates a password recovery, they are sent a unique challenge  code (via email, SMS, or another medium) and a signed token in the response.  The client must submit this code along with the signed token to confirm  their identity.\nUpon successful verification, the server responds with another signed token  and its validity period (in seconds) in response. The user can reset their  password by submitting the new password along with the signed token within  the specified expiration time. \nIf the provided code is invalid, expired, or does not match the expected challenge, the server will respond with an appropriate error message.\nThe token should be kept secure by client to prevent unauthorized access.\n",
        "operationId" : "recovery-challenge",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestRecoveryChallenge"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestRecoveryChallenge"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseRecoveryChallenge"
                }
              }
            },
            "description" : "Recovery challenge verified successfully. A signed token and its validity period are returned for resetting the password."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "The input is invalid or missing required fields."
          },
          "403" : {
            "description" : "The user does not have permission to perform this action."
          }
        },
        "security" : [ ],
        "summary" : "Verifies the recovery challenge code and token from the recovery initiation step.",
        "tags" : [ "Recovery" ]
      }
    },
    "/recovery/reset" : {
      "post" : {
        "description" : "This route allows the user to reset their password by submitting the new password along with the signed token received during the recovery challenge step. The token  must be submitted within the specified expiration time. The server will validate  the token and the new password before resetting it. If the token is invalid, expired,  or incorrect, an appropriate error message will be returned.\nUpon successful password reset, the server responds with a success message.  The user can now log in with their new password.\n",
        "operationId" : "recovery-reset",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestRecoveryReset"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestRecoveryReset"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseSuccessMessage"
                }
              }
            },
            "description" : "Password reset successful. The user can now log in with the new password."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "The input is invalid or missing required fields."
          },
          "401" : {
            "description" : "Invalid or expired token."
          },
          "403" : {
            "description" : "The token is incorrect or has been tampered with."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseProblem"
                }
              }
            },
            "description" : "The user does not exist in the system or the token is invalid."
          }
        },
        "security" : [ ],
        "summary" : "Resets the user's password using the recovery challenge token and new password.",
        "tags" : [ "Recovery" ]
      }
    },
    "/content" : {
      "get" : {
        "operationId" : "get-all-content",
        "parameters" : [ {
          "explode" : true,
          "in" : "query",
          "name" : "platform",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TypeSupportedPlatform"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "title",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "publishedOn",
          "required" : false,
          "schema" : {
            "format" : "date",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "explode" : true,
          "in" : "query",
          "name" : "hashtags",
          "required" : false,
          "schema" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetUserContent"
                }
              }
            },
            "description" : "List of content retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid filter parameters."
          },
          "404" : {
            "description" : "No content found for the given filters."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "List all contents for the currently authenticated user.",
        "tags" : [ "Content" ]
      },
      "post" : {
        "description" : "On successful completion of this request, the response contents a pre signed url in which the user needs to upload the content. On successful completion of document update, it's responsibility of the document uploading server to notify the application server that the content has been uploaded.",
        "operationId" : "create-content",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponsePreSignedURL"
                }
              }
            },
            "description" : "Contents the generated pre signed URL, on which the client has to upload the content."
          },
          "400" : {
            "description" : "Invalid parameters for getting presigned URL."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Publish content for the currently authenticated user.",
        "tags" : [ "Content" ]
      }
    },
    "/content/{ContentID}" : {
      "delete" : {
        "operationId" : "delete-content-by-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Content deleted successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. Access to delete the content is denied."
          },
          "404" : {
            "description" : "Content not found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Delete a specific piece of content.",
        "tags" : [ "Content" ]
      },
      "get" : {
        "operationId" : "get-content-by-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TypeContentDetails"
                }
              }
            },
            "description" : "Content details retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. Access to the content is denied."
          },
          "404" : {
            "description" : "Content not found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Retrieve details for a specific piece of content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/status/{ContentID}" : {
      "get" : {
        "operationId" : "get-content-status-by-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetContentStatusByID"
                }
              }
            },
            "description" : "Content status retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "404" : {
            "description" : "Content not found. The specified content ID does not exist."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Check the status of a specific piece of content.",
        "tags" : [ "Content" ]
      },
      "patch" : {
        "operationId" : "update-content-status-by-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdateContentStatusByID"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Content status updated successfuly."
          },
          "404" : {
            "description" : "Could not find content with specified ID."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Changes content status for a particular content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/collaboration/{ContentID}" : {
      "get" : {
        "operationId" : "get-content-collaboration-by-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        }, {
          "description" : "The current status of the collaboration request.",
          "explode" : true,
          "in" : "query",
          "name" : "status",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TypeCollaborationStatus"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of pending invitations."
          },
          "404" : {
            "description" : "Content not found. The specified content ID does not exist."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Get all collaboration requests for a particular content",
        "tags" : [ "Content" ]
      },
      "patch" : {
        "description" : "The user can accept or decline content request invitation. Need to consider whether to make a new endpoint for accept/decline invitations and use this endpoint for modifying access control instead. Reference of Google Zanziber can be used for access control.",
        "operationId" : "update-pending-invites-for-content-by-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestCollaborationAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Invitation status updated."
          },
          "400" : {
            "description" : "Bad request. The action is invalid or the request is malformed."
          },
          "404" : {
            "description" : "Invitation not found. No invitation for the specified content ID."
          },
          "409" : {
            "description" : "Conflict. The action cannot be performed due to a conflict in the invitation status."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Accept or decline invitations.",
        "tags" : [ "Content" ]
      },
      "post" : {
        "operationId" : "send-collaboration-invitations",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestCollaboration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Invitation sent successfully."
          },
          "400" : {
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "404" : {
            "description" : "Content not found. The specified content ID does not exist."
          },
          "409" : {
            "description" : "Conflict. Invitation already exists for the user."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Invite users to collaborate on content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/analytics/{ContentID}" : {
      "get" : {
        "operationId" : "get-content-analytics",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetContentAnalyticsByID"
                }
              }
            },
            "description" : "Analytics data retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. Access to the content's analytics is denied."
          },
          "404" : {
            "description" : "Content not found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "View analytics for a specific piece of content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/upload-finish/{ContentID}" : {
      "get" : {
        "description" : "After the upload has been finished in the object storage, the storage server will ping this endpoint with the content id. This endpoint will change the status of the content from uploading to processing and then further process the content stored in the object store.\nNote that this endpoint also changes the status of the content.",
        "operationId" : "content-upload-finished",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Content status successfully changed."
          },
          "400" : {
            "description" : "In case the previous status of the content is not uploading, this endpoint will not change the status to processing and will not do any task on the content."
          },
          "404" : {
            "description" : "The specified content ID does not exist."
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        } ],
        "summary" : "Handle content processing after upload finishes.",
        "tags" : [ "Content" ]
      }
    },
    "/platforms/{PlatformID}" : {
      "delete" : {
        "operationId" : "disconnect-platform",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "PlatformID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeSupportedPlatform"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Platform disconnected successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid platform ID or missing parameters."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to disconnect the platform."
          },
          "404" : {
            "description" : "Not found. The platform does not exist."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Disconnect an existing platform.",
        "tags" : [ "Platforms" ]
      },
      "post" : {
        "operationId" : "connect-platform",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "PlatformID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/TypeSupportedPlatform"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Platform connected successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid platform ID or missing parameters."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to connect the platform."
          },
          "404" : {
            "description" : "Not found. The platform does not exist."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Connect a new platform.",
        "tags" : [ "Platforms" ]
      }
    },
    "/platforms/sync" : {
      "post" : {
        "operationId" : "sync-all-external-platforms",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestPlatformSync"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Platform sync initiated successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid sync request or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to sync content."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to sync content."
          },
          "404" : {
            "description" : "Not found. The specified platform could not be found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Sync content from external platforms.",
        "tags" : [ "Platforms" ]
      }
    },
    "/pipeline" : {
      "get" : {
        "description" : "Get pipelines saved for a particular user. Todo is to decide whether prebuild pipelines are also send alongside user pipelines in this.",
        "operationId" : "get-pipelines",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseGetPipeline"
                }
              }
            },
            "description" : "All pipelines defined by a particular user as well as predefined common pipelines."
          },
          "404" : {
            "description" : "No predefined or saved pipeline found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Gets all the pipelines created by the user as well as predefined pipelines.",
        "tags" : [ "Pipeline" ]
      },
      "patch" : {
        "operationId" : "modify-pipeline",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdatePipeline"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Pipeline specification modified successfully."
          },
          "400" : {
            "description" : "Bad Request, invalid inputs."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to update pipeline."
          },
          "404" : {
            "description" : "Not found. The pipeline does not exist."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Modify a new user specification for content processing pipeline.",
        "tags" : [ "Pipeline" ]
      },
      "post" : {
        "operationId" : "create-pipeline",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestCreatePipeline"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseCreatePipeline"
                }
              }
            },
            "description" : "Pipeline specification created successfully."
          },
          "400" : {
            "description" : "Bad Request, invalid inputs."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Creates a new user specification for content processing pipeline.",
        "tags" : [ "Pipeline" ]
      }
    },
    "/pipeline/name" : {
      "patch" : {
        "operationId" : "update-pipeline-name",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdatePipelineName"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestUpdatePipelineName"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Pipeline name updated successfully."
          },
          "404" : {
            "description" : "No predefined or saved pipeline found with provided ID."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Updates the name of the specified pipeline.",
        "tags" : [ "Pipeline" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "ContentIDParam" : {
        "explode" : false,
        "in" : "path",
        "name" : "ContentID",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TypeContentID"
        },
        "style" : "simple"
      },
      "PlatformIDParam" : {
        "explode" : false,
        "in" : "path",
        "name" : "PlatformID",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/TypeSupportedPlatform"
        },
        "style" : "simple"
      }
    },
    "schemas" : {
      "ResponseGetHealth" : {
        "properties" : {
          "timestamp" : {
            "format" : "date-time",
            "type" : "string"
          },
          "uptime" : {
            "description" : "Server uptime in milliseconds in UNIX format",
            "format" : "int64",
            "type" : "integer"
          },
          "status" : {
            "description" : "Status message, e.g. for describing errors or any other health related message",
            "type" : "string"
          }
        },
        "required" : [ "status", "timestamp", "uptime" ],
        "type" : "object"
      },
      "TypeHonorifics" : {
        "enum" : [ "Mr", "Mrs", "Miss", "Ms", "Mx", "Sir", "Dr", "Prof", "Rev", "Capt", "Col", "Maj", "Judge", "Shri", "Smt", "Kumari", "Pandit", "Swami", "Begum", "Sahib", "Janab" ],
        "type" : "string"
      },
      "TypeUserGender" : {
        "enum" : [ "Male", "Female", "Transgender" ],
        "type" : "string"
      },
      "TypeUsername" : {
        "maxLength" : 36,
        "minLength" : 4,
        "readOnly" : true,
        "type" : "string"
      },
      "ResponseGetUserProfile" : {
        "properties" : {
          "honorifics" : {
            "$ref" : "#/components/schemas/TypeHonorifics"
          },
          "firstname" : {
            "minLength" : 1,
            "type" : "string"
          },
          "middlename" : {
            "type" : "string"
          },
          "lastname" : {
            "minLength" : 1,
            "type" : "string"
          },
          "gender" : {
            "$ref" : "#/components/schemas/TypeUserGender"
          },
          "dateOfBirth" : {
            "format" : "date",
            "type" : "string"
          },
          "username" : {
            "$ref" : "#/components/schemas/TypeUsername"
          },
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "isEmailVerified" : {
            "default" : false,
            "type" : "boolean"
          },
          "mobileNumber" : {
            "pattern" : "^[+]{1}(?:[0-9\\-\\(\\)\\/\\.]\\s?){6, 15}[0-9]{1}$",
            "type" : "string"
          },
          "isMobileVerified" : {
            "default" : false,
            "type" : "boolean"
          },
          "twoFactorAuthentication" : {
            "default" : true,
            "description" : "Whether two factor authentication hould be used or not.",
            "type" : "boolean"
          }
        },
        "required" : [ "dateOfBirth", "email", "firstname", "gender", "lastname", "mobileNumber", "password", "username" ],
        "type" : "object"
      },
      "RequestUpdateUserProfile" : {
        "properties" : {
          "username" : {
            "$ref" : "#/components/schemas/TypeUsername"
          },
          "avatarURL" : {
            "format" : "uri-reference",
            "type" : "string"
          }
        },
        "required" : [ "avatarURL", "username" ],
        "type" : "object"
      },
      "TypeUserVisibility" : {
        "description" : "Whether a particular user setting or content is available for public viewing or private access. This is again subject to implementation details as without being a social media, only some users can find other users profile. Hence probably it is only for controlling the views of user profile rather than the content user posts.",
        "enum" : [ "Public", "Private" ],
        "type" : "string"
      },
      "ResponseGetUserSettings" : {
        "properties" : {
          "notifications" : {
            "type" : "boolean"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/TypeUserVisibility"
          }
        },
        "required" : [ "notifications", "visibility" ],
        "type" : "object"
      },
      "RequestUpdateUserSettings" : {
        "properties" : {
          "notifications" : {
            "description" : "Whether notifications is on for the user or not.",
            "type" : "boolean"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/TypeUserVisibility"
          }
        },
        "required" : [ "notifications", "visibility" ],
        "type" : "object"
      },
      "TypeUserID" : {
        "description" : "A unique identifier for user.",
        "format" : "uuid",
        "type" : "string"
      },
      "ResponseGetUserAnalytics" : {
        "properties" : {
          "userID" : {
            "$ref" : "#/components/schemas/TypeUserID"
          },
          "totalContent" : {
            "description" : "Total number of content the user has uploaded.",
            "type" : "integer"
          },
          "totalViews" : {
            "description" : "Total engagement count or view count for the content over different platforms. This is subjected to change in favour of an array of with eacch social media and their respective measurement of engagement or interaction.",
            "type" : "integer"
          }
        },
        "required" : [ "totalContent", "totalViews", "userID" ],
        "type" : "object"
      },
      "RequestUpdateUserPassword" : {
        "properties" : {
          "oldPassword" : {
            "format" : "password",
            "type" : "string",
            "writeOnly" : true
          },
          "newPassword" : {
            "format" : "password",
            "type" : "string",
            "writeOnly" : true
          }
        },
        "required" : [ "newPassword", "oldPassword" ],
        "type" : "object"
      },
      "RequestLogin" : {
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string",
            "writeOnly" : true
          },
          "password" : {
            "format" : "password",
            "type" : "string",
            "writeOnly" : true
          }
        },
        "required" : [ "email", "password" ],
        "type" : "object"
      },
      "ResponseLogin" : {
        "description" : "Check if requiresTwoFactorAuth is true, then use ID and generated OTP to send another request to get authentication tokens. If two factor authentication is set to false, directly access the tokens from the object.",
        "properties" : {
          "requiresTwoFactorAuth" : {
            "description" : "Whether two factor authentication is on or off. If true, accessToken and refreshToken needs to be set empty string. If false, only then the tokens contain meaningful information.",
            "type" : "boolean"
          },
          "loginAttemptID" : {
            "description" : "This is to keep track of which login attempt will be validated using the two factor authentication OTP.",
            "format" : "uuid",
            "type" : "string"
          },
          "loginAttemptTimeStamp" : {
            "format" : "date-time",
            "type" : "string"
          },
          "accessToken" : {
            "format" : "byte",
            "type" : "string"
          },
          "refreshToken" : {
            "format" : "byte",
            "type" : "string"
          }
        },
        "required" : [ "accessToken", "loginAttemptID", "loginAttemptTimeStamp", "refreshToken", "requiresTwoFactorAuth" ],
        "type" : "object"
      },
      "RequestTwoFactorAuth" : {
        "description" : "Contains a pair of login attempt ID and it's corresponding challenge.",
        "properties" : {
          "loginAttemptID" : {
            "format" : "uuid",
            "type" : "string"
          },
          "oneTimePassword" : {
            "maxLength" : 8,
            "minLength" : 4,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TypeProblemDetails" : {
        "properties" : {
          "target" : {
            "description" : "The target of this specific error i.e. which attribute caused the error.",
            "example" : "userID",
            "type" : "string"
          },
          "message" : {
            "description" : "Specific error message for this validation issue i.e. explanation of the error.",
            "example" : "Must be a valid UUID.",
            "type" : "string"
          }
        },
        "required" : [ "message", "target" ],
        "type" : "object"
      },
      "ResponseProblem" : {
        "example" : {
          "errors" : [ {
            "message" : "Must be a valid email address.",
            "target" : "email"
          }, {
            "message" : "Must not be empty.",
            "target" : "password"
          } ]
        },
        "properties" : {
          "errors" : {
            "items" : {
              "$ref" : "#/components/schemas/TypeProblemDetails"
            },
            "type" : "array"
          }
        },
        "required" : [ "errors" ],
        "type" : "object"
      },
      "RequestRegister" : {
        "properties" : {
          "honorifics" : {
            "$ref" : "#/components/schemas/TypeHonorifics"
          },
          "firstname" : {
            "maxLength" : 24,
            "minLength" : 1,
            "type" : "string"
          },
          "middlename" : {
            "maxLength" : 24,
            "type" : "string"
          },
          "lastname" : {
            "maxLength" : 24,
            "minLength" : 1,
            "type" : "string"
          },
          "gender" : {
            "$ref" : "#/components/schemas/TypeUserGender"
          },
          "dateOfBirth" : {
            "format" : "date",
            "type" : "string"
          },
          "username" : {
            "$ref" : "#/components/schemas/TypeUsername"
          },
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "password" : {
            "format" : "password",
            "maxLength" : 32,
            "minLength" : 8,
            "type" : "string",
            "writeOnly" : true
          },
          "twoFactorAuthentication" : {
            "default" : true,
            "description" : "Whether two factor authentication hould be used or not.",
            "type" : "boolean"
          },
          "mobileNumber" : {
            "pattern" : "^[+]{1}(?:[0-9\\-\\(\\)\\/\\.]\\s?){6, 15}[0-9]{1}$",
            "type" : "string"
          }
        },
        "required" : [ "dateOfBirth", "email", "firstname", "gender", "lastname", "mobileNumber", "password", "username" ],
        "type" : "object"
      },
      "RequestAuthRevalidate" : {
        "properties" : {
          "refreshToken" : {
            "type" : "string"
          }
        },
        "required" : [ "refreshToken" ],
        "type" : "object"
      },
      "ResponseAuthRevalidate" : {
        "properties" : {
          "accessToken" : {
            "type" : "string"
          },
          "refreshToken" : {
            "type" : "string"
          }
        },
        "required" : [ "accessToken", "refreshToken" ],
        "type" : "object"
      },
      "RequestRecoveryInitiate" : {
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string"
          }
        },
        "required" : [ "email" ],
        "type" : "object"
      },
      "TypeRecoveryID" : {
        "description" : "An unique ID to identify the recovery process for a user.",
        "format" : "uuid",
        "type" : "string"
      },
      "TypeRecoveryToken" : {
        "description" : "A token signed by the server for validating recovery process. This token is required to be sent at each of the succeeding step to verify the authenticity of the recovery process.",
        "format" : "base64",
        "type" : "string"
      },
      "ResponseRecoveryInitiate" : {
        "properties" : {
          "recoveryID" : {
            "$ref" : "#/components/schemas/TypeRecoveryID"
          },
          "recoveryToken" : {
            "$ref" : "#/components/schemas/TypeRecoveryToken"
          },
          "recoveryInitiationTime" : {
            "description" : "Server timestamp as which the recovery initialization request started processing.",
            "format" : "date-time",
            "type" : "string"
          },
          "challengeValidTill" : {
            "description" : "Server timestamp till which the challenge sent will be valid.",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "required" : [ "challengeValidTill", "recoveryID", "recoveryInitiationTime", "recoveryToken" ],
        "type" : "object"
      },
      "RequestRecoveryChallenge" : {
        "description" : "Contains the recoveryID for which the challenge is being conducted, the token signed by the server and the challenge sent via seperate medium.",
        "properties" : {
          "recoveryID" : {
            "$ref" : "#/components/schemas/TypeRecoveryID"
          },
          "recoveryToken" : {
            "$ref" : "#/components/schemas/TypeRecoveryToken"
          },
          "challenge" : {
            "maxLength" : 8,
            "minLength" : 4,
            "type" : "string"
          }
        },
        "required" : [ "challenge", "recoveryID", "recoveryToken" ],
        "type" : "object"
      },
      "ResponseRecoveryChallenge" : {
        "properties" : {
          "recoveryID" : {
            "$ref" : "#/components/schemas/TypeRecoveryID"
          },
          "recoveryToken" : {
            "$ref" : "#/components/schemas/TypeRecoveryToken"
          }
        },
        "required" : [ "recoveryID", "recoveryToken" ],
        "type" : "object"
      },
      "RequestRecoveryReset" : {
        "properties" : {
          "recoveryID" : {
            "$ref" : "#/components/schemas/TypeRecoveryID"
          },
          "recoveryToken" : {
            "$ref" : "#/components/schemas/TypeRecoveryToken"
          },
          "newPassword" : {
            "format" : "password",
            "type" : "string",
            "writeOnly" : true
          }
        },
        "required" : [ "newPassword", "recoveryID", "recoveryToken" ],
        "type" : "object"
      },
      "ResponseSuccessMessage" : {
        "additionalProperties" : true,
        "properties" : {
          "message" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TypeSupportedPlatform" : {
        "description" : "List of supported platforms.",
        "enum" : [ "Facebook", "LinkedIn", "Twitter", "Instagram", "TikTok", "Reddit", "SnapChat", "YouTube" ],
        "type" : "string"
      },
      "TypeContentID" : {
        "description" : "ID of the uploaded content",
        "example" : "acde070d-8c4c-4f0d-9d8a-162843c10333",
        "format" : "uuid",
        "type" : "string"
      },
      "TypePipelineID" : {
        "description" : "Identifier to uniquely identify a saved pipeline.",
        "format" : "uuid",
        "type" : "string"
      },
      "TypeContentDetails" : {
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "pipelineID" : {
            "$ref" : "#/components/schemas/TypePipelineID"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "platforms" : {
            "description" : "List of platforms on which the content is published.",
            "items" : {
              "$ref" : "#/components/schemas/TypeSupportedPlatform"
            },
            "type" : "array"
          }
        },
        "required" : [ "contentID", "description", "pipelineID", "platforms", "title" ],
        "type" : "object"
      },
      "ResponseGetUserContent" : {
        "properties" : {
          "contents" : {
            "items" : {
              "$ref" : "#/components/schemas/TypeContentDetails"
            },
            "type" : "array"
          }
        },
        "required" : [ "contents" ],
        "type" : "object"
      },
      "ResponsePreSignedURL" : {
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "preSignedURL" : {
            "description" : "Presigned URL to upload the content with specified ID into the object storage.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "required" : [ "contentID", "preSignedURL" ],
        "type" : "object"
      },
      "TypeContentStatus" : {
        "description" : "Current status of the uploaded content",
        "enum" : [ "Uploading", "Processing", "Published", "Failed", "Deleted", "UnderReview" ],
        "type" : "string"
      },
      "ResponseGetContentStatusByID" : {
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "status" : {
            "$ref" : "#/components/schemas/TypeContentStatus"
          }
        },
        "required" : [ "contentID", "status" ],
        "type" : "object"
      },
      "RequestUpdateContentStatusByID" : {
        "description" : "Changes the status of the content with given ID.",
        "properties" : {
          "updatedStatus" : {
            "$ref" : "#/components/schemas/TypeContentStatus"
          }
        },
        "required" : [ "updatedStatus" ],
        "type" : "object"
      },
      "TypeCollaborationStatus" : {
        "description" : "Status of collaboration request, the collaborator could have accepted the request, rejected the request, or haven't decided yet, in which case the request status is still pending.",
        "enum" : [ "Pending", "Accepted", "Declined" ],
        "type" : "string"
      },
      "TypeContentPermission" : {
        "description" : "Access permission for the corresponding content.",
        "enum" : [ "Viewer", "Commenter", "Editor", "Owner" ],
        "type" : "string"
      },
      "TypeUserContentAccessControl" : {
        "description" : "This can be used to grant a particular access to a particular user when used with the content identifier.",
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "userID" : {
            "$ref" : "#/components/schemas/TypeUserID"
          },
          "permission" : {
            "$ref" : "#/components/schemas/TypeContentPermission"
          }
        },
        "required" : [ "contentID", "permission", "userID" ],
        "type" : "object"
      },
      "RequestCollaboration" : {
        "properties" : {
          "permissions" : {
            "items" : {
              "$ref" : "#/components/schemas/TypeUserContentAccessControl"
            },
            "type" : "array"
          }
        },
        "required" : [ "permissions" ],
        "type" : "object"
      },
      "TypeUserDecision" : {
        "enum" : [ "Accept", "Decline" ],
        "type" : "string"
      },
      "RequestCollaborationAction" : {
        "properties" : {
          "invitationID" : {
            "format" : "uuid",
            "type" : "string"
          },
          "action" : {
            "$ref" : "#/components/schemas/TypeUserDecision"
          }
        },
        "required" : [ "action", "invitationID" ],
        "type" : "object"
      },
      "TypeContentAnalytics" : {
        "properties" : {
          "platform" : {
            "$ref" : "#/components/schemas/TypeSupportedPlatform"
          },
          "views" : {
            "type" : "integer"
          },
          "engagement" : {
            "type" : "integer"
          }
        },
        "required" : [ "engagement", "platform", "views" ],
        "type" : "object"
      },
      "ResponseGetContentAnalyticsByID" : {
        "description" : "Contents an array with the analytics of all the platform the content is published on.",
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/TypeContentID"
          },
          "analytics" : {
            "items" : {
              "$ref" : "#/components/schemas/TypeContentAnalytics"
            },
            "type" : "array"
          }
        },
        "required" : [ "analytics", "contentID" ],
        "type" : "object"
      },
      "RequestPlatformSync" : {
        "description" : "Used to sync data with the provided platforms.",
        "properties" : {
          "platform" : {
            "items" : {
              "$ref" : "#/components/schemas/TypeSupportedPlatform"
            },
            "type" : "array"
          }
        },
        "required" : [ "platform" ],
        "type" : "object"
      },
      "TypePipelineName" : {
        "description" : "A name to identify the created pipeline for hoomans (intended). The pipeline will be saved under user account with this name. For temporary pipelines, a random name will be generated.",
        "minLength" : 1,
        "type" : "string"
      },
      "TypePipelineMetadata" : {
        "description" : "A metadata object to store additional information about pipeline.",
        "properties" : {
          "pipelineID" : {
            "$ref" : "#/components/schemas/TypePipelineID"
          },
          "pipelineName" : {
            "$ref" : "#/components/schemas/TypePipelineName"
          }
        },
        "required" : [ "pipelineID" ],
        "type" : "object"
      },
      "TypePipelineStep" : {
        "enum" : [ 0, 1, 2, 3, 4 ],
        "type" : "integer",
        "x-enum-varnames" : [ "ClosedCaptionGeneration", "HashtagsGeneration", "DescriptionGeneration", "VoiceoverGeneration", "SoundTrackGeneration" ],
        "x-enum-descriptions" : [ "Generate Closed Caption", "Generate Hashtags", "Generate Description", "Generate Voiceover", "Generate SoundTrack" ]
      },
      "TypePipelinePath" : {
        "description" : "An object which contains path or sequence of pipeline steps to be followed before publishing the content to a specified platform.",
        "properties" : {
          "platform" : {
            "$ref" : "#/components/schemas/TypeSupportedPlatform"
          },
          "steps" : {
            "items" : {
              "$ref" : "#/components/schemas/TypePipelineStep"
            },
            "type" : "array"
          }
        },
        "required" : [ "platform", "steps" ],
        "type" : "object"
      },
      "TypePipelineSpecification" : {
        "description" : "An array containing multiple pipeline paths each for a different supported platform. This array describes the complete pipeline for multiple platforms as each pipeline path contains the description of the steps which should be performed before publishing a content to the respective platform.",
        "items" : {
          "$ref" : "#/components/schemas/TypePipelinePath"
        },
        "type" : "array"
      },
      "TypePipeline" : {
        "description" : "Description of a pipeline, contains a list of objects describing path or sequence of steps to execute for individual pipeline along with pipeline metadata.",
        "properties" : {
          "pipelineMetadata" : {
            "$ref" : "#/components/schemas/TypePipelineMetadata"
          },
          "pipelineSpecification" : {
            "$ref" : "#/components/schemas/TypePipelineSpecification"
          }
        },
        "required" : [ "pipelineMetadata", "pipelineSpecification" ],
        "type" : "object"
      },
      "ResponseGetPipeline" : {
        "description" : "Response to get the pipelines for a particular user. Decide whether prebuild pipelines are also sent alongside user pipelines in this.",
        "properties" : {
          "isPrebuildIncluded" : {
            "default" : true,
            "description" : "Boolean value to indicate whether prebuild pipelines are included.",
            "type" : "boolean"
          },
          "pipelines" : {
            "description" : "List of pipelines created by the user as well as prebuild pipelines, if requested.",
            "items" : {
              "$ref" : "#/components/schemas/TypePipeline"
            },
            "type" : "array"
          }
        },
        "required" : [ "isPrebuildIncluded", "pipelines" ],
        "type" : "object"
      },
      "RequestCreatePipeline" : {
        "properties" : {
          "isTemporary" : {
            "default" : true,
            "description" : "Whether to store the pipeline under user account.",
            "type" : "boolean"
          },
          "pipelineName" : {
            "$ref" : "#/components/schemas/TypePipelineName"
          },
          "pipelineSpecification" : {
            "$ref" : "#/components/schemas/TypePipelineSpecification"
          }
        },
        "required" : [ "isTemporary", "pipelineSpecification" ],
        "type" : "object"
      },
      "ResponseCreatePipeline" : {
        "description" : "Response after a particular pipeline is saved in persisting storage. The pipeline can either be saved under a particular user account or as a temporary pipeline specification for processing a single content.",
        "properties" : {
          "pipelineID" : {
            "$ref" : "#/components/schemas/TypePipelineID"
          }
        },
        "required" : [ "pipelineID" ],
        "type" : "object"
      },
      "RequestUpdatePipeline" : {
        "description" : "Request to update an existing pipeline specification.",
        "properties" : {
          "pipelineMetadata" : {
            "$ref" : "#/components/schemas/TypePipelineMetadata"
          },
          "pipelineSpecification" : {
            "$ref" : "#/components/schemas/TypePipelineSpecification"
          }
        },
        "required" : [ "pipelineMetadata", "pipelineSpecification" ],
        "type" : "object"
      },
      "RequestUpdatePipelineName" : {
        "properties" : {
          "pipelineID" : {
            "$ref" : "#/components/schemas/TypePipelineID"
          },
          "pipelineName" : {
            "$ref" : "#/components/schemas/TypePipelineName"
          }
        },
        "required" : [ "pipelineID", "pipelineName" ],
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "BearerAuth" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      },
      "ApiKeyAuth" : {
        "in" : "header",
        "name" : "x-api-key",
        "type" : "apiKey"
      }
    }
  }
}